@page "/create-agency"
@using ThatInterpretingAgency.Core.DTOs
@using BlazorFrontend.Services
@inject IAgencyService AgencyService
@inject NavigationManager Navigation
@inject ILogger<CreateAgency> Logger

<PageTitle>Create Agency - THAT Interpreting Agency</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">
                        <i class="fas fa-building me-2"></i>
                        Create New Agency
                    </h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@agencyRequest" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="name" class="form-label">Agency Name *</label>
                                <InputText id="name" class="@(nameError ? "form-control is-invalid" : "form-control")" 
                                         @bind-Value="agencyRequest.Name" />
                                @if (nameError)
                                {
                                    <div class="invalid-feedback">@nameErrorMessage</div>
                                }
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email *</label>
                                <InputText id="email" type="email" class="@(emailError ? "form-control is-invalid" : "form-control")" 
                                         @bind-Value="agencyRequest.Email" />
                                @if (emailError)
                                {
                                    <div class="invalid-feedback">@emailErrorMessage</div>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="phone" class="form-label">Phone</label>
                                <InputText id="phone" class="form-control" @bind-Value="agencyRequest.Phone" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="contactInfo" class="form-label">Contact Person</label>
                                <InputText id="contactInfo" class="form-control" @bind-Value="agencyRequest.ContactInfo" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <InputTextArea id="address" class="form-control" rows="3" @bind-Value="agencyRequest.Address" />
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                <i class="fas fa-arrow-left me-2"></i>
                                Back
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Creating...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>Create Agency</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @successMessage
                    <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private CreateAgencyRequest agencyRequest = new();
    private bool isSubmitting = false;
    private string? successMessage;
    private string? errorMessage;
    private bool nameError = false;
    private bool emailError = false;
    private string? nameErrorMessage;
    private string? emailErrorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            nameError = false;
            emailError = false;
            nameErrorMessage = null;
            emailErrorMessage = null;

            // Basic validation
            if (string.IsNullOrWhiteSpace(agencyRequest.Name))
            {
                nameError = true;
                nameErrorMessage = "Agency name is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(agencyRequest.Email))
            {
                emailError = true;
                emailErrorMessage = "Email is required.";
                return;
            }

            // Call the service to create the agency
            var createdAgency = await AgencyService.CreateAgencyAsync(agencyRequest);

            if (createdAgency != null)
            {
                successMessage = $"Agency '{createdAgency.Name}' created successfully!";
                
                // Clear the form
                agencyRequest = new();
                
                // Redirect to agencies list after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/agencies");
            }
            else
            {
                errorMessage = "Failed to create agency. Please try again.";
            }
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("already exists"))
        {
            // Handle duplicate agency name error
            nameError = true;
            nameErrorMessage = "Agency already exists. Please use a different agency name.";
            errorMessage = "Agency already exists. Please use a different agency name.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating agency");
            errorMessage = "An error occurred while creating the agency. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/agencies");
    }
}
